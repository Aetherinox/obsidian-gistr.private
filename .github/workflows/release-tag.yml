# ---------------------------------------------------------------------------------------
#   @parent     : github workflow
#   @desc       : push release (tag)
#   @author     : Aetherinox
#   @url        : https://github.com/Aetherinox
# ---------------------------------------------------------------------------------------

name: "Publish Release [Tag]"
run-name: "Release [Tag] - ${{ github.event.workflow_run.id }}"

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: "Release Candidate"
        required: true
        default: false
        type: boolean
      rc_version:
        description: "RC Version"
        required: false
        type: string
        default: 1
env:
    PLUGIN_NAME: gistr
jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
          contents: write
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: "20.x"

            # ---------------------------------------------------------------------------------------
            #   Get version from package.json VERSION value
            # ---------------------------------------------------------------------------------------

            - name: Get Package Version
              id: get_package_version
              run: echo "PACKAGE_VERSION=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV

            # ---------------------------------------------------------------------------------------
            #   Build ( Release Candidate )
            # ---------------------------------------------------------------------------------------

            - name: Build (Release Candidate)
              id: dev
              if: ${{ startsWith( inputs.prerelease, true ) }}
              run: |
                  echo Building PRE-RELEASE Package .zip PACKAGE_VERSION
                  npm ci
                  npm run build
                  zip -jr ${{ env.PLUGIN_NAME }}-${{ env.PACKAGE_VERSION }}-rc.${{ inputs.rc_version }}.zip dist/*
                  ls

            # ---------------------------------------------------------------------------------------
            #   Build ( Stable )
            # ---------------------------------------------------------------------------------------

            - name: Build (Stable)
              id: build
              if: ${{ startsWith( inputs.prerelease, false ) }}
              run: |
                  echo Building STABLE Package .zip PACKAGE_VERSION
                  npm ci
                  npm run build
                  zip -jr ${{ env.PLUGIN_NAME }}-${{ env.PACKAGE_VERSION }}.zip dist/*
                  ls

            # ---------------------------------------------------------------------------------------
            #   Checksum ( Release Candidate )
            # ---------------------------------------------------------------------------------------

            - name: Create checksum (Release Candidate)
              if: ${{ startsWith( inputs.prerelease, true ) }}
              run: |
                shasum --algorithm 256 ${{ env.PLUGIN_NAME }}-${{ env.PACKAGE_VERSION }}-rc.${{ inputs.rc_version }}.zip > SHA256SUMS.txt

            # ---------------------------------------------------------------------------------------
            #   Checksum ( Release )
            # ---------------------------------------------------------------------------------------

            - name: Create checksum (Release)
              if: ${{ startsWith( inputs.prerelease, false ) }}
              run: |
                shasum --algorithm 256 ${{ env.PLUGIN_NAME }}-${{ env.PACKAGE_VERSION }}.zip > SHA256SUMS.txt


            - name: Generate details for creating release notes
              id: generate-release-details
              shell: bash
              run: |
                set -o xtrace
                RELEASE_BRANCH="main"
                RELEASE_VERSION=v${{ env.PACKAGE_VERSION }}
                major=$(echo "$RELEASE_VERSION"  | sed 's/^v\(.*\)/\1/' | cut -d. -f1)
                minor=$(echo "$RELEASE_VERSION" | cut -d. -f2)
                revision=$(echo "$RELEASE_VERSION" | cut -d. -f3)
                if [ "$revision" -gt 0 ];then
                  revision=$(($revision-1))
                  RELEASE_BRANCH="release-${major}.${minor}"
                elif [ "$minor" -gt 0 ]; then
                  minor=$(($minor-1))
                elif [ "$major" -gt 0 ]; then
                  major=$(($major-1))
                else
                  echo "Please validate that the tag release version(${RELEASE_VERSION}) conforms to semver."
                  exit 1
                fi
                LAST_TAG="v${major}.${minor}.${revision}"
                echo "Last release tag - $LAST_TAG"
                START_SHA=$(git rev-list -n 1 $LAST_TAG)
                echo "Release note generator start SHA - $START_SHA"
                END_SHA=$(git rev-list -n 1 $RELEASE_VERSION)
                echo "Release note generator end SHA - $END_SHA"

                echo "::set-output name=start-sha::$START_SHA"
                echo "::set-output name=end-sha::$END_SHA"
                echo "::set-output name=release-version::$RELEASE_VERSION"
                echo "::set-output name=prev-release-version::$LAST_TAG"
                echo "::set-output name=repo-name::$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')"
                echo "::set-output name=repo-org::$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')"
                echo "::set-output name=release-branch::$RELEASE_BRANCH"
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Install release-note dependency
              run: |
                go get k8s.io/release/cmd/release-notes@latest

            - name: Get Time
              id: time
              uses: nanzm/get-time-action@v1.1
              with:
                format: 'YYYYMMDDHHmmss'

            - name: Generate release notes
              id: get-release-notes
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                release-notes \
                    --github-base-url https://github.com \
                    --org ${{ steps.generate-release-details.outputs.repo-org }} \
                    --repo ${{ steps.generate-release-details.outputs.repo-name }} \
                    --branch ${{ steps.generate-release-details.outputs.release-branch }} \
                    --required-author "" \
                    --start-sha ${{ steps.generate-release-details.outputs.start-sha }} \
                    --end-sha ${{ steps.generate-release-details.outputs.end-sha }} \
                    --output /tmp/${{ steps.time.outputs.time }}-bin-notes

            - name: Get Github Release notes
              uses: octokit/request-action@v2.x
              id: get-github-release-notes
              with:
                route: POST /repos/{owner}/{repo}/releases/generate-notes
                owner: ${{ steps.generate-release-details.outputs.repo-org }}
                repo: ${{ steps.generate-release-details.outputs.repo-name }}
                tag_name: ${{ steps.generate-release-details.outputs.release-version }}
                previous_tag_name: ${{ steps.generate-release-details.outputs.prev-release-version }}
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: 'Identify New Contributors section'
              id: get-new-contributors
              run: |
                githubOutput="/tmp/${{ steps.time.outputs.time }}-github-output"
                echo "${{ fromJson(steps.get-github-release-notes.outputs.data).body }}" > "$githubOutput"


            - name: Generate the release notes
              shell: bash
              run: |
                NEW_CONTRIBUTORS=$(sed -n '/## New Contributors/,$p' /tmp/${{ steps.time.outputs.time }}-github-output)
                RELEASE_TOOL_NOTES=$(sed 's/### Uncategorized/### Miscellaneous/g' /tmp/${{ steps.time.outputs.time }}-bin-notes)
                RELEASE_NOTES=$(cat <<-END
                  ## Tanzu CLI Installation Instructions

                  If you are installing Tanzu CLI using the artifacts published as part of this release, please follow the [instructions](https://github.com/vmware-tanzu/tanzu-framework/blob/main/docs/cli/getting-started.md).

                  $RELEASE_TOOL_NOTES

                  $NEW_CONTRIBUTORS
                END
                )
                echo "$RELEASE_NOTES"
                echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
                echo "$RELEASE_NOTES" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV

            # ---------------------------------------------------------------------------------------
            #   [ Release Candidate ]: Create Release
            # ---------------------------------------------------------------------------------------

            - name: Release Candidate
              if: ${{ startsWith( inputs.prerelease, true ) }}
              uses: softprops/action-gh-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                name: v${{ env.PACKAGE_VERSION }}-rc.${{ inputs.rc_version }}
                tag_name: ${{ env.PACKAGE_VERSION }}
                target_commitish: ${{ github.event.inputs.branch }}
                draft: false
                generate_release_notes: true
                files: |
                  ${{ env.PLUGIN_NAME }}-${{ env.PACKAGE_VERSION }}-rc.${{ inputs.rc_version }}.zip
                  dist/main.js
                  dist/manifest.json
                  dist/styles.css
                  SHA256SUMS.txt
                prerelease: true

            # ---------------------------------------------------------------------------------------
            #   [ Release ]: Create Release
            # ---------------------------------------------------------------------------------------

            - name: Release
              if: ${{ startsWith( inputs.prerelease, false ) }}
              uses: softprops/action-gh-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                name: v${{ env.PACKAGE_VERSION }}
                tag_name: ${{ env.PACKAGE_VERSION }}
                target_commitish: ${{ github.event.inputs.branch }}
                draft: false
                generate_release_notes: true
                files: |
                  ${{ env.PLUGIN_NAME }}-${{ env.PACKAGE_VERSION }}.zip
                  dist/main.js
                  dist/manifest.json
                  dist/styles.css
                  checksum.txt
                prerelease: false